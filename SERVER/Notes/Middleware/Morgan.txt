morgan is a popular middleware for Node.js and Express.js that provides HTTP request logging functionality. It automatically logs 
incoming HTTP requests and their details to the console or to a log file. This makes it useful for monitoring and debugging purposes, 
as it helps you track incoming requests and understand what's happening in your application.

To use morgan, you first need to install it in your Node.js project:

npm install morgan


Once installed, you can use it in your Express.js application like this:

const express = require('express');
const morgan = require('morgan');

const app = express();

// Use morgan middleware to log HTTP requests to the console
app.use(morgan('dev'));

// Your other routes and middleware would go here

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


In this example, we've added morgan('dev') as middleware using app.use(). The argument 'dev' is one of the pre-defined formats provided 
by morgan, and it logs concise output like this:

GET /api/users 200 15.899 ms - 55






morgan is a popular middleware for Node.js and Express.js that provides HTTP request logging functionality. 
It automatically logs incoming HTTP requests and their details to the console or to a log file. This makes it useful for monitoring and 
debugging purposes, as it helps you track incoming requests and understand what's happening in your application.

To use morgan, you first need to install it in your Node.js project:

bash
Copy code
npm install morgan
Once installed, you can use it in your Express.js application like this:

javascript
Copy code
const express = require('express');
const morgan = require('morgan');

const app = express();

// Use morgan middleware to log HTTP requests to the console
app.use(morgan('dev'));

// Your other routes and middleware would go here

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


In this example, we've added morgan('dev') as middleware using app.use(). The argument 'dev' is one of the pre-defined formats provided 
by morgan, and it logs concise output like this:

bash
Copy code
GET /api/users 200 15.899 ms - 55
The information logged includes:

The HTTP method (GET in this case)
The requested URL (/api/users)
The status code of the response (200)
The response time in milliseconds (15.899 ms)
The response size (55 bytes in this case)

morgan supports different formats for logging, so you can customize it according to your requirements. Here are some other formats you 
can use:

'combined': Standard Apache combined log format
'common': Standard Apache common log format
'short': Shorter version of the 'combined' format
'tiny': Minimal output, good for production

You can also create your custom logging format using a callback function. For example:

app.use(morgan((tokens, req, res) => {
  return `${tokens.method(req, res)} ${tokens.url(req, res)} - ${tokens.status(req, res)} - ${tokens['response-time'](req, res)} ms`;
}));


In this case, we are logging the HTTP method, URL, status, and response time in a custom format.

morgan is a powerful and convenient middleware for keeping track of HTTP requests in your Node.js and Express.js applications, and 
it's widely used in the Node.js ecosystem.





