In Node.js, dotenv is a popular npm package used for loading environment variables from a .env file into the Node.js process.env object. 
It is commonly used to manage sensitive information or configuration settings in development environments and to keep 
them separate from the codebase.

1.
npm install dotenv

2. Create a .env file:
DB_HOST=localhost
DB_USER=myuser
DB_PASSWORD=mypassword
SECRET_KEY=mysecretkey

3.
Load the environment variables using dotenv:
In your Node.js application entry point (usually the main file, like index.js or app.js), require and load the dotenv package at 
the very beginning of your application:

require('dotenv').config();


By calling config() on dotenv, it automatically reads the .env file and sets the environment variables in the process.env object. 
The variables are now accessible throughout your application using process.env.VARIABLE_NAME.

For example, using the .env file above:

const dbHost = process.env.DB_HOST;
const dbUser = process.env.DB_USER;
const dbPassword = process.env.DB_PASSWORD;
const secretKey = process.env.SECRET_KEY;

// Now you can use these variables in your application
console.log(`Database host: ${dbHost}`);
console.log(`Secret Key: ${secretKey}`);


Remember that environment variables defined in the .env file should not be committed to version control systems like Git. 
It's common practice to add .env to your .gitignore file to prevent it from being tracked.

Using dotenv simplifies the process of managing environment-specific configuration and sensitive information, making your 
Node.js applications more flexible and secure.