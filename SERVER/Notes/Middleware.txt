
In Node.js, middleware refers to functions or pieces of code that are executed between the incoming request and the corresponding response. 
Middleware functions are used to perform various tasks such as handling request data, modifying the response, logging, authentication, and 
more. They are an essential part of building robust and maintainable web applications using frameworks like Express.js.

Middleware functions can be chained together to create a pipeline through which the request flows. Each middleware in the pipeline can 
perform its specific task and optionally pass control to the next middleware by invoking the next() function.

In Express.js, middleware is often defined using the app.use() method, but it can also be used with individual routes using router.use().

Here's a simple example of how to use middleware in Express.js:

const express = require('express');
const app = express();

// Middleware function to log the request method and URL
const logMiddleware = (req, res, next) => {
  console.log(`Received ${req.method} request at ${req.url}`);
  next(); // Move on to the next middleware or route handler
};

// Middleware function to check if the request contains an "Authorization" header
const checkAuthMiddleware = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) {
    return res.status(401).send('Unauthorized');
  }
  next(); // Move on to the next middleware or route handler
};

// Register the middleware globally for all routes
app.use(logMiddleware);

// Register the checkAuthMiddleware for a specific route
app.get('/protected', checkAuthMiddleware, (req, res) => {
  res.send('Welcome to the protected route!');
});

// Route handler for a public route
app.get('/public', (req, res) => {
  res.send('This is a public route.');
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


